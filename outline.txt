Zenen Treadwell
Nov 20th, 2020

Okay so I'm going to be pretty casual in this document, basically just using it as a journal for my thought process while doing this project.

First: The easiest solution I can think of is to write it all in Django. It has a generic Form View which would be well-suited to inputting the data.
The hardest part is going to be doing the "where" effectively, with a little research I can see that GeoDjango would be able to effectively work with
location data, but I haven't used it before. I'm going to tackle that last among the data points and input the data as latlong coordinates now -
translation can come later.

Overall, I see this project taking the following arc over the next 10 hours:
1. Build the Django page
2. Integrate GeoDjango
3. Integrate a REST API
4. Build a ReactJS front-end
5. Switch to Postgres
6. Make it look nice
7. Dockerise the application?


This took 10 minutes to write up, I'll start on the project tomorrow and work via Pomodoro timing.

Nov 21st
preliminary research led me to this article: https://realpython.com/location-based-app-with-geodjango-tutorial/#creating-a-django-model
PointField seems to be what I'm looking for, so I'll use this article to guide me towards getting off the ground with this app

Pomodoro 1: laying the groundwork
- had to install gdal, python3-gdal to my system

Running a containerized database with podman
> podman run --name=postgis -d -e POSTGRES_USER=user001 -e POSTGRES_PASS=123456789 -e POSTGRES_DBNAME=gis -p 5432:5432 kartoza/postgis:9.6-2.4

Pomo 2: building the "app" module
- I'm assuming that feed will be measured in grams
- admin username: freshworks, password: ducksauce

- admin site set up, model migrated to db

Pomo 3: setting up the view
- using https://www.geeksforgeeks.org/django-modelform-create-form-from-models/ to build the modelform
- barebones display functional - not sure how I'm gonna display location...

Pomo 4: building a form view
- note: generic formview doesn't seem to work well


Nov 22nd
Okay, taking stock of yesterday's work. I'm working on steps 1 and 2 at the same time, and once I can configure submitting data i should be able to
mark those off of my list. In order to do that, I think I need to start building the API to receive POST requests.

Pomo 1:
- following the DRF tutorial didn't work, gonna default to my working implementation

Pomo 2:
- api success! now to submit to it with a formview
- form validation is causing some trouble
- the form works in a very basic way, but I think that I would be better off writing the rest in React

Pomo 3:
-integrating api request into react
-I think that I want to design this page so that adding a new entry comes up as a modal component on top of a list

I stopped pomodoroing
- gotta update the database to use geographical points rather than geometrical ones (turned out to be super trivial)
- note: use react-leaflet for the modal component

I finished up the front page of the react app. I lost track of time but I'm going to say I spent max 4 hours working this morning

Nov 22nd - evening
I really want to have this project mostly done for Monday so that I can spend tomorrow morning putting on the finishing touches and documenting it.
The only major thing left to do is to create the modal component and stylise the page.

Pomo 1: react submission
- having trouble with modal components

Pomo 2:
- note: not using propTypes in this project
- functional components and state hooks seem to be the "better" way to make this work, but I would rather just hack together a working demo

Pomo 3:
- slow progress, working on saving form data to the component's state (this seems smelly but.. #hacking)
- alright, time to integrate the leaflet map!
- it needs to be a functional component - i'll separate it

Pomo 5:
- getting into it now, formatting data for API posting
- Ahh! the Geodjango backend isn't recognizing my string input
- IT WORKED

...losing track of time
I have full functionality now, but I think it's been almost 10 hours total at this point. I'm gonna document my work and push it.
