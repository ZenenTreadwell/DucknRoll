Zenen Treadwell
Nov 20th, 2020

Okay so I'm going to be pretty casual in this document, basically just using it as a journal for my thought process while doing this project.

First: The easiest solution I can think of is to write it all in Django. It has a generic Form View which would be well-suited to inputting the data.
The hardest part is going to be doing the "where" effectively, with a little research I can see that GeoDjango would be able to effectively work with
location data, but I haven't used it before. I'm going to tackle that last among the data points and input the data as latlong coordinates now -
translation can come later.

Overall, I see this project taking the following arc over the next 10 hours:
1. Build the Django page
2. Integrate GeoDjango
3. Integrate a REST API
4. Build a ReactJS front-end
5. Switch to Postgres
6. Make it look nice
7. Dockerise the application?


This took 10 minutes to write up, I'll start on the project tomorrow and work via Pomodoro timing.

Nov 21st
preliminary research led me to this article: https://realpython.com/location-based-app-with-geodjango-tutorial/#creating-a-django-model
PointField seems to be what I'm looking for, so I'll use this article to guide me towards getting off the ground with this app

Pomodoro 1: laying the groundwork
- had to install gdal, python3-gdal to my system

Running a containerized database with podman
> podman run --name=postgis -d -e POSTGRES_USER=user001 -e POSTGRES_PASS=123456789 -e POSTGRES_DBNAME=gis -p 5432:5432 kartoza/postgis:9.6-2.4

Pomo 2: building the "app" module
- I'm assuming that feed will be measured in grams
- admin username: freshworks, password: ducksauce

- admin site set up, model migrated to db

Pomo 3: setting up the view
- using https://www.geeksforgeeks.org/django-modelform-create-form-from-models/ to build the modelform
- barebones display functional - not sure how I'm gonna display location...

Pomo 4: building a form view
- note: generic formview doesn't seem to work well
